/*----------------------------------------------------------------------------*/
/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.team670.robot.commands.auton;

import java.util.HashMap;
import java.util.Map;

import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.CommandGroupBase;
import edu.wpi.first.wpilibj2.command.ParallelCommandGroup;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import frc.team670.paths.Generator3BallMidToGenerator2BallSidePath;
import frc.team670.paths.Path;
import frc.team670.robot.commands.MustangCommand;
import frc.team670.robot.commands.indexer.SendAllBalls;
import frc.team670.robot.commands.shooter.Shoot;
import frc.team670.robot.commands.turret.RotateTurret;
import frc.team670.robot.dataCollection.MustangCoprocessor;
import frc.team670.robot.subsystems.Conveyor;
import frc.team670.robot.subsystems.DriveBase;
import frc.team670.robot.subsystems.Indexer;
import frc.team670.robot.subsystems.Intake;
import frc.team670.robot.subsystems.MustangSubsystemBase;
import frc.team670.robot.subsystems.MustangSubsystemBase.HealthState;

public class AutonCommandBase extends CommandBase implements MustangCommand {

  private Path trajectory;
  private DriveBase driveBase;
  private MustangCoprocessor coprocessor;
  private Map<MustangSubsystemBase, HealthState> healthReqs;

  public GeneralAuton(Path trajectory, MustangCoprocessor coprocessor, DriveBase driveBase,
      MustangSubsystemBase... subsystems) {
    // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    this.trajectory = trajectory;
    this.driveBase = driveBase;
    this.coprocessor = coprocessor;

    healthReqs = new HashMap<MustangSubsystemBase, HealthState>();
    for (MustangSubsystemBase i : subsystems) {
      healthReqs.put(i, HealthState.GREEN);
    }
  }

  @Override
  public Map<MustangSubsystemBase, HealthState> getHealthRequirements() {
    // TODO Auto-generated method stub
    return healthReqs;
  }
}
